import express from "express";

// Socket.io setup
import http from "http";
import { Server as socketio } from "socket.io";

const app = express();
const port = 3000;

// Create HTTP server and attach Socket.IO
const httpServer = http.createServer(app);
const io = new socketio(httpServer);


// Set EJS as the template engine
app.set("view engine", "ejs");

// Path setup for __dirname equivalent
import path from "path";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Serve static files
app.use(express.static(path.join(__dirname, "public")));


// Handle Socket.IO connections
io.on("connection", function (socket) {
    socket.on("send_location", function (data) {

        io.emit("receive_location", { id: socket.id, ...data });
    });

    socket.on("disconnect", function () {
        io.emit("user_disconnected", socket.id);
    });

    console.log("New user connected: ", socket.id);


});


// Define the root route
app.get("/", (req, res) => {
    res.render("index");
});

// Start the HTTP server (not app.listen)
httpServer.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});





























<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Tracker</title>
    <link rel="stylesheet" href="/css/style.css">

    <!-- leaflet css cdn -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"
        integrity="sha512-h9FcoyWjHcOcmEVkxOfTLnmZFWIH0iZhZT1H2TbOq55xssQGEJHEaIm+PgoUaZbRvQTNTluNOEfb1ZRy6D3BOw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body>


    <div id="map"></div>


    <!-- leaflet js cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"
        integrity="sha512-puJW3E/qXDqYp9IfhAI54BJEaWIfloJ7JWs7OeD5i6ruC9JZL1gERT1wjtwXFlh7CjE7ZJ+/vcRZRkIYIb6p4g=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- socket io cdn -->
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"
        integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+"
        crossorigin="anonymous"></script>

    <!-- script.js -->
    <script src="/js/script.js"></script>
</body>

</html>
































const socket = io();

// Watch and emit user's location
if (navigator.geolocation) {
    navigator.geolocation.watchPosition(
        (position) => {
            console.log(position);

            const { latitude, longitude } = position.coords;
            socket.emit("send_location", { latitude, longitude });
        },
        (error) => {
            console.error("Unable to get location", error);
        },
        {
            enableHighAccuracy: true,
            timeout: 3000,
            maximumAge: 0,
        }
    );
}

// Initialize Leaflet map
const map = L.map("map").setView([0, 0], 10);

// Add OpenStreetMap tiles
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(map);

// Object to keep track of markers for each user
const markers = {};

socket.on('receive_location', (data) => {
    const { id, latitude, longitude } = data;

    map.setView([latitude, longitude]);

    if (markers[id]) {
        markers[id].setLatLng([latitude, longitude]);
    }
    else {
        markers[id] = L.marker([latitude, longitude]).addTo(map);
    }
});

socket.on('user_disconnected', (id) => {
    if (markers[id]) {
        map.removeLayer(markers[id]);
        delete markers[id];
    }
});













* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html,
body {
    height: 100%;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

#map {
    width: 100%;
    height: 100%;
}

